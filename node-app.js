// Generated by CoffeeScript 1.3.3
var events, file, httpdigest, io, previousClient, schedule, server, socket, socketio, ssh, static_;

static_ = require("node-static");

httpdigest = require('http-digest');

events = require("events");

ssh = require("./ssh");

file = new static_.Server("./web");

server = httpdigest.createServer("fouli", "fouli", function(request, response) {
  return request.addListener("end", function() {
    return file.serve(request, response);
  });
});

server.listen(8081);

socketio = require('socket.io');

io = socketio.listen(server);

socket = null;

previousClient = null;

io.sockets.on("connection", function(_socket) {
  var chk;
  socket = _socket;
  socket.on("disconnect", function() {
    return ssh.cancel();
  });
  if (previousClient) {
    previousClient.disconnect();
  }
  previousClient = socket;
  chk = function() {
    return ssh.checkNodes(function(status) {
      socket.emit("status", status);
      return setTimeout(chk, 5000);
    });
  };
  chk();
  ssh.consolestream.write = function(data) {
    socket.emit("consolelog", data.toString());
    return true;
  };
  socket.on("cancel", function(data) {
    ssh.cancel();
    return socket.emit("ready");
  });
  socket.on("setup", function(data) {
    return ssh.setup(function() {
      return socket.emit("setupExecuted");
    });
  });
  return socket.on("run", function(data) {
    var exp,
      _this = this;
    exp = JSON.parse(data);
    return schedule(exp, function(result) {
      if (!result) {
        exp.status = "error";
        socket.emit("update", exp);
        return;
      }
      exp.status = "done";
      switch (exp.expType) {
        case "Throughput and Loss":
          exp.result = {
            loss: result.lost / result.total * 100,
            throughput: result.bandwidth_bps / 1000000
          };
          break;
        case "File Transfer":
          exp.result = {
            delay: result.time_s
          };
      }
      socket.emit("update", exp);
      return socket.emit("ready");
    });
  });
});

schedule = function(exp, cb) {
  var run;
  exp.status = "running";
  socket.emit("update", exp);
  run = function() {
    switch (exp.expType) {
      case "Throughput and Loss":
        return ssh.runIperf(cb);
      case "File Transfer":
        return ssh.runUFTP(cb);
    }
  };
  switch (exp.bsConf) {
    case "HARQ and ARQ":
      return ssh.config(1, 1, 0, run);
    case "HARQ only":
      return ssh.config(1, 0, 0, run);
    case "NC":
      return ssh.config(0, 0, 0, run);
  }
};
